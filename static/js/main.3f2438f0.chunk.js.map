{"version":3,"sources":["Header.js","Meme.js","Select.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Meme","state","topText","bottomText","allMemeImgs","handleSubmit","event","console","log","preventDefault","randNum","Math","floor","random","length","randMemeImg","url","setState","randomImg","handleTopChange","target","value","handleBottomChange","fetch","then","response","json","memes","data","this","props","location","Form","Group","controlId","Label","Control","type","placeholder","onChange","Text","src","alt","Component","Select","showMeme","images","map","image","to","pathname","onClick","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3f2438f0.chunk.js","sourcesContent":["import React from 'react'\r\nimport './App.css'\r\n\r\nconst Header = () => {\r\n    return ( \r\n    <div className=\"header-font\">\r\n        <nav className=\"navbar navbar-dark bg-dark justify-content-center\">\r\n        <h1 className=\"navbar-brand header-font\">Meme Generator</h1>\r\n        </nav>\r\n    </div> );\r\n}\r\n \r\nexport default Header;","import React, { Component } from 'react';\r\nimport { Button,Image,Row,Container,Col } from 'react-bootstrap';\r\nimport './App.css'\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nclass Meme extends Component{\r\n\r\n    state = {\r\n        topText: \"\",\r\n        bottomText: \"\",\r\n        allMemeImgs: ['']\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                const {memes} = response.data\r\n                this.setState({ allMemeImgs: memes })\r\n            })\r\n\r\n            console.log(this.props.location.state);\r\n\r\n    }\r\n\r\n    handleSubmit=(event)=> {\r\n        console.log(\"hiii\")\r\n        event.preventDefault()\r\n        const randNum = Math.floor(Math.random() * (this.state.allMemeImgs.length))\r\n        const randMemeImg = this.state.allMemeImgs[randNum].url\r\n        this.setState({ randomImg: randMemeImg })\r\n    }\r\n\r\n    handleTopChange=(event)=> {\r\n        this.setState({ topText:event.target.value })\r\n    }\r\n\r\n    handleBottomChange=(event)=> {\r\n        this.setState({ bottomText:event.target.value })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"justify-content-center\">\r\n            <Form className=\"row container justify-content-center mb-sm-3 mb-md-6 mt-sm-3 mt-md-6\">\r\n            <Form.Group controlId=\"basicInputForm\" className=\"col-lg-6\">\r\n            <Form.Label>Top Text</Form.Label>\r\n             <Form.Control type=\"text\" placeholder=\"Enter text\" value={this.state.topText} onChange={this.handleTopChange}/>\r\n            <Form.Text className=\"text-muted\" >\r\n              This will be displayed on top side of the meme.\r\n            </Form.Text>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"basicInputForm\" className=\"col-lg-6\">\r\n            <Form.Label>Bottom Text</Form.Label>\r\n             <Form.Control type=\"text\" placeholder=\"Enter text\" value={this.state.bottomText} onChange={this.handleBottomChange}/>\r\n            <Form.Text className=\"text-muted\" >\r\n            This will be displayed on bottom side of the meme.\r\n            </Form.Text>\r\n            </Form.Group>\r\n            {/* <Button variant=\"primary\" onClick={this.handleSubmit}>Next Meme</Button> */}\r\n            </Form>\r\n\r\n\r\n            <div className=\"meme mb-sm-3 mb-md-6\">\r\n                    <img src={this.props.location.state} alt=\"\" className=\"img-fluid justify-content-center\"/>\r\n                    <h2 className=\"top col-sm-3 col-md-6\">{this.state.topText}</h2>\r\n                    <h2 className=\"bottom\">{this.state.bottomText}</h2>\r\n                </div>    \r\n            </div>\r\n    \r\n        )\r\n    }\r\n}\r\n\r\nexport default Meme;","import React, { Component } from 'react';\r\nimport './App.css'\r\nimport { Modal,Image,Row,Container,Col,Button } from 'react-bootstrap';\r\nimport Meme from './Meme';\r\nimport {Link} from 'react-router-dom'\r\n\r\n\r\nclass Select extends Component {\r\n    state = {\r\n        topText: \"\",\r\n        bottomText: \"\",\r\n        randomImg: \"\",\r\n        allMemeImgs: [''],\r\n        showMeme:true\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                const {memes} = response.data\r\n                this.setState({ allMemeImgs: memes })\r\n            })\r\n    }\r\n\r\n    // dispMeme(){\r\n    //     console.log(\"hi\");\r\n    //     this.setState({showMeme:false})\r\n    //     this.props.history.push({\r\n    //         pathname: '/meme',\r\n    //         data: this.state.randomImg // your data array of objects\r\n    //       })\r\n    // }\r\n\r\n    showGrid(){\r\n        this.setState({showMeme:true});\r\n    }\r\n\r\n\r\n    render() {\r\n        const images = this.state.allMemeImgs.map(image => {\r\n            return <Link className=\" col-md-20 col-sm-3\" to={{ \r\n                pathname: \"/meme\", \r\n                state: image.url\r\n               }}><img src={image.url} className=\"gallery__img\" onClick={()=>{ this.setState({randomImg:image.url})}}/>\r\n               </Link>\r\n         });\r\n\r\n        //  var screen=this.state.showMeme;\r\n\r\n        //  if(screen)\r\n        //  {\r\n    return ( \r\n        <div className=\"container\">\r\n            <h1>Select a meme template</h1>\r\n        <div className=\"row gallery\">\r\n                       { images }\r\n        </div>\r\n        </div>\r\n       \r\n     );\r\n    // }\r\n    // else{\r\n    //     return(\r\n    //     <Meme image={this.state.randomImg}/>\r\n    //     );\r\n    // }\r\n    }\r\n}\r\n \r\nexport default Select;","import React from 'react';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport Header from './Header';\r\nimport Meme from './Meme'\r\nimport 'react-bootstrap'\r\nimport Select from './Select'\r\nimport { \r\n  BrowserRouter as Router, \r\n  Route, \r\n  Link, \r\n  Switch \r\n} from 'react-router-dom'; \r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n    <Header/>\r\n      <Switch> \r\n              <Route exact path='/Meme-Generator_JS' component={Select}></Route> \r\n              <Route exact path='/meme' component={Meme}></Route> \r\n      </Switch> \r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}